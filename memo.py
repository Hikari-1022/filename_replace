#==========コレクションの種類と使い分け==========
# リスト
# 変更：可
# 重複：あり
# 順序：あり
list = ["apple", "banana", "orange"]
list.append("grape")    # 追加

# タプル
# 変更：不可
# 重複：あり
# 順序：あり
tuple = ("apple", "banana", "orange")

# セット
# 変更：可
# 重複：なし
# 順序：なし
set = {"apple", "banana", "orange", "apple"}
print(set)  # {"banana", "apple", "orange"} 定義時に重複が消える(順序なし)

# ディクショナリ
# 変更：可
# 重複：なし(値は重複OK)
# 順序：あり(Python3.7以降)
dictionary = {"apple": "120", "banana": "160", "orange": "60"}
print(dictionary["apple"])  # 120


#==========正規表現==========
# 基本トークン（文字クラス）
# .          ：改行以外の任意の1文字
# \d         ：数字1文字（[0-9] と同義）
# \D         ：数字以外の1文字（[^0-9]）
# \w         ：単語構成文字（英数字 + アンダースコア） [a-zA-Z0-9_]
# \W         ：非単語構成文字（\w以外）
# \s         ：空白文字（スペース, タブ, 改行など）
# \S         ：空白以外の文字
# [abc]      ：a, b, c のいずれか1文字
# [^abc]     ：a, b, c 以外の1文字
# [a-z]      ：a〜z の範囲
# [0-9]      ：0〜9 の範囲
# [A-Za-z0-9_]：英数字 + アンダースコア（\w と同義）

# 量指定子（繰り返し指定）
# *          ：0回以上の繰り返し（貪欲）
# +          ：1回以上の繰り返し（貪欲）
# ?          ：0回または1回（オプション）
# {n}        ：n回ちょうど
# {n,}       ：n回以上
# {n,m}      ：n〜m回
# *?, +?, ?? ：最小マッチ（非貪欲）

# 位置指定
# ^          ：文字列の先頭
# $          ：文字列の末尾
# \b         ：単語境界（例："cat" の前後）
# \B         ：非単語境界
# (?m)       ：複数行モード（^ と $ が行頭・行末にもマッチ）

# グループ化・参照
# (...)      ：グループ化（キャプチャ）
# (?:...)    ：非キャプチャグループ（後で参照しない）
# (?P<name>...)：名前付きキャプチャグループ
# \1, \2     ：1番目、2番目のキャプチャを参照
# (?=...)    ：先読み（この後に続くパターンを条件にする）
# (?!...)    ：否定先読み
# (?<=...)   ：後読み
# (?<!...)   ：否定後読み

# エスケープ文字
# \.         ：「.」を文字として扱う
# \_         ：「_」を文字として扱う
# \-         ：「-」を文字として扱う
# \\         ：「\」自体を表す